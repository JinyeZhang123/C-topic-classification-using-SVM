template<class Modificate_Action>
class SegTree {
private:
  using T = typename Modificate_Action::T; // ?????¨???????????´??????????????? ??¨???:????????????????????????????±????????????????
  using M = typename Modificate_Action::Monoid::T; // ?????¨?´???¢??????????????°?????? ??¨???:????????????????????§??????????????????????????¨????????´???????????????
  Modificate_Action action; // ?????¨?????????????????????: ?????°????????¨???????????¨?????¨???????????´???????´???????????????¨??????????????????
  typename Modificate_Action::Monoid op; // ?????¨?´???¢?????????????????????: ?????¨?´????????????????????????????????????????(????????????????????¨?´???§??????)
  const int n, h;
  vector<T> t;
  vector<M> deferred_action;
  bool has_lazy;

  void act_node(int i, const M& m) {
    if (i < n) deferred_action[i] = op(m, deferred_action[i]); // if not leaves, unite actions
    else {
      i -= n;
      t[i] = action(m, t[i]); // if leaves, act immediately (to tree)
    }