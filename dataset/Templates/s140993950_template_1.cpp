template<class T = size_t>
class HL_Decomposition{
#define PB push_back
	typedef vector<T> vt;
	T n;
public:
	template<class G>
	HL_Decomposition(const G & es, T root = 0) : n(es.size()), v2cmp(n), v2line(n), parent(n), depth(n, 0) {
		// to[v] : HL????§£????????????????????????????????????????????§?????? v ????¬??????\?????????????????????????????? (????????????n)
		vt to(n, n);

		// to[v] ????§????
		function<T(T, T)> dfs = [&](T c, T p) {
			parent[c] = p;
			// s  : c ????????¨????????¨?????¨????????????
			// ma : ???????????§?????§?????¨?????¨????????????
			T s = 1, ma = 0;
			for (auto e : es[c]) {
				if (e.to != p) {
					depth[e.to] = depth[c] + 1;
					T x = dfs(e.to, c);
					s += x;
					if (ma < x) ma = x, to[c] = e.to;
				}